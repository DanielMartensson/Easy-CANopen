#include <stdio.h>
#include <stdlib.h>

/* Include Easy CANopen */
#include "Easy_CANopen/Easy_CANopen.h"

int main() {
	/* Declare our structures */
	CANopen master_node = {0};
	CANopen slave_node = {0}; /* Notice that ONLY one slave node can be connected to the CAN network */

	/* Begin to activate node configuration so we can write our node ID */
	Easy_CANopen_Other_Node_Activate_Node_Configuration(true);

	/* Reading process for the slave node */
	Easy_CANopen_Thread_Listen_Messages(&slave_node);

	/* Set identification to slave */
	uint8_t table_index = 3;
	uint16_t delay = 0;	/* This is not used inside this library. I don't know why delays should be useful in modern hardware */
	Easy_CANopen_Other_Node_Set_Baud_Rate_To_Node(&master_node, table_index, delay); /* This sends two messages to the slave */

	/* Reading process for the slave */
	Easy_CANopen_Thread_Listen_Messages(&slave_node);
	Easy_CANopen_Thread_Listen_Messages(&slave_node);

	/* Read the process for the master */
	Easy_CANopen_Thread_Listen_Messages(&master_node);

	/* Display the identifications for slave node */
	printf("Table index = %i\n", slave_node.slave.lss.table_index);

	/* Display the response from the slave */
	printf("Response from slave node to master node: %s\n", master_node.master.lss.status_code == STATUS_CODE_SUCCESSFUL ? "STATUS_CODE_SUCCESSFUL" : "STATUS_CODE_INVALID_PARAMETER");
	printf("Response from slave node to master node: 0x%X\n", master_node.master.lss.status_code_specific);

	return 0;
}